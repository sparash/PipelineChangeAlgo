import pandas as pd
import numpy as np
import re
import string
from Levenshtein import distance as levenshtein_distance
from Levenshtein import jaro_winkler, ratio as levenshtein_ratio
import textdistance
from fuzzywuzzy import fuzz
import jellyfish
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from collections import defaultdict
import warnings
warnings.filterwarnings('ignore')

# Try to import pyahocorasick, provide fallback if not available
try:
    import pyahocorasick
    aho_corasick_available = True
except ImportError:
    print("Warning: pyahocorasick not available. Using fallback implementation.")
    aho_corasick_available = False

# For embedding similarity - use TF-IDF as fallback
try:
    # Skip sentence-transformers since it's causing errors in your environment
    print("Using TF-IDF vectorizer for text embeddings instead of sentence-transformers")
    
    class TfidfEmbedder:
        def __init__(self):
            self.vectorizer = TfidfVectorizer(analyzer='char_wb', ngram_range=(2, 4))
            self.fitted = False
        
        def fit(self, texts):
            self.vectorizer.fit(texts)
            self.fitted = True
        
        def encode(self, texts, batch_size=None):
            if not self.fitted:
                self.fit(texts)
            return self.vectorizer.transform(texts if isinstance(texts, list) else [texts]).toarray()
    
    embedding_model = TfidfEmbedder()
    embedding_available = True
except Exception as e:
    print(f"Warning: Error initializing embeddings: {e}")
    embedding_available = False
